import typing
from enum import Enum


class DataType(Enum):
	"""
	The possible types of data that can be generated by this tool.

	CIRCLE: circles around a fixed point, each getting larger radii from each other.

	SEPARATED_BLOBS: Separated blobs of data, each randomly positioned.

	GIANT_BLOB: A giant blob at a fixed point. Only a single one will be generated.
	"""
	CIRCLE = 1
	SEPARATED_BLOBS = 2
	GIANT_BLOB = 3


class Data:

	def __init__(self, values: typing.List[float]):
		self.values: typing.List[float] = values

	def __getitem__(self, item):
		if not isinstance(item, slice):
			selection = slice(item)
		else:
			selection = item
		return self.values[selection]

	def __len__(self) -> int:
		"""
		:return: the number of dimensions this data has.
		"""
		return len(self.values)


def _generate_circles(total_amt_of_data: int, num_of_classifications: int):
	raise NotImplementedError


def _generate_separated_blobs(total_amt_of_data: int, num_of_classifications: int):
	raise NotImplementedError


def _generate_giant_blob(total_amt_of_data: int):
	raise NotImplementedError


def generate_data(total_amt_of_data: int, num_of_classifications: int, data_type: DataType) -> typing.List[Data]:
	"""
	Generates a 2D list of random data that is customizable by the parameters provided.
	:param total_amt_of_data: The total amount of data points to generate.
	:param num_of_classifications: The number of classifications the data can have.
	:param data_type: Determines how the data is to be generated, based off of its visual representation.
	:return: 2D list of all of the data.
	"""
	if data_type is DataType.CIRCLE:
		return _generate_circles(total_amt_of_data, num_of_classifications)
	elif data_type is DataType.SEPARATED_BLOBS:
		return _generate_separated_blobs(total_amt_of_data, num_of_classifications)
	elif data_type is DataType.GIANT_BLOB:
		return _generate_giant_blob(total_amt_of_data)
	else:
		raise ValueError(
			f"Got unexpected DataType value for parameter 'data_type' in function generate_data: {data_type}")
